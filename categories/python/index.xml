<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Code experiments</title>
    <link>https://elleryq.github.io/code-experiments/categories/python/</link>
    <description>Recent content in python on Code experiments</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Mon, 26 Jun 2017 09:12:00 +0800</lastBuildDate>
    
	<atom:link href="https://elleryq.github.io/code-experiments/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python - metaclass</title>
      <link>https://elleryq.github.io/code-experiments/posts/2017-06-26-python-metaclass/</link>
      <pubDate>Mon, 26 Jun 2017 09:12:00 +0800</pubDate>
      
      <guid>https://elleryq.github.io/code-experiments/posts/2017-06-26-python-metaclass/</guid>
      <description>好奇 Django 的 Meta 怎麼做的，上網找了資料，並且參考 Django 的原始 碼。
#!/usr/bin/env python # -*- coding: utf-8 -*- import six # 先做一個 Meta class ，Django 的 ModelBase 就是一個 Meta class class Meta(type): # 一定要繼承 type def __call__(self): print(&#39;Enter Meta.__call__: {}&#39;.format(self)) obj = super(Meta, self).__call__() print(&#39;Exit Meta.__call__: {}&#39;.format(obj)) return obj # 主要的關建 def __new__(cls, name, bases, attrs): print(&#39;Enter Meta.__new__: {} {} {} {}&#39;.format( cls, name, bases, attrs)) newClass = super(Meta, cls).__new__(cls, name, bases, attrs) # 取得類別裡 Meta 子類別的 attribute metaClass = attrs.</description>
    </item>
    
    <item>
      <title>Python - UTC 日期轉 local 日期</title>
      <link>https://elleryq.github.io/code-experiments/posts/2016-11-03-python-utc-date-go-local-date/</link>
      <pubDate>Thu, 03 Nov 2016 08:25:00 +0800</pubDate>
      
      <guid>https://elleryq.github.io/code-experiments/posts/2016-11-03-python-utc-date-go-local-date/</guid>
      <description>用 dateutil 做解析日期字串，然後用 arrow 做轉換，很方便。
from __future__ import print_function import sys from dateutil.parser import parse import arrow def utc2local(utc_date_str): utc_date = parse(utc_date_str) # 用 dateutil.parser.parse 來解析日期字串 local_date = arrow.get(utc_date).to(&#39;Asia/Taipei&#39;) # 拿到日期，用 to 轉換，收工 return local_date.format(&#39;YYYY-MM-DD HH:mm:ss&#39;) # 格式化以後傳回 def main(): if not len(sys.argv[1:]): print(&amp;quot;No arguments&amp;quot;) return for arg in sys.argv[1:]: print(utc2local(arg)) if __name__ == &amp;quot;__main__&amp;quot;: main()  </description>
    </item>
    
    <item>
      <title>Python - 將句子中的單字首字轉換成大寫</title>
      <link>https://elleryq.github.io/code-experiments/posts/2016-10-21-python-sentences-in-a-single-prefix-character-converted-to-uppercase/</link>
      <pubDate>Fri, 21 Oct 2016 01:20:00 +0800</pubDate>
      
      <guid>https://elleryq.github.io/code-experiments/posts/2016-10-21-python-sentences-in-a-single-prefix-character-converted-to-uppercase/</guid>
      <description>在網路上看到，就順便試試看。來源：Let&amp;rsquo;s Start From Here: [JS/ES6] 將句子中的單字首字轉換成大寫-不用正規表示法
用 regular expression 的話，應該是可以用 \w+ 去找到每個 match，再用 capitalize() 轉換就行了。
# -*- coding: utf-8 -*- &amp;quot;&amp;quot;&amp;quot;Convert each words capital in string.&amp;quot;&amp;quot;&amp;quot; from __future__ import print_function from argparse import ArgumentParser def convert_each_word_capital(s): &amp;quot;&amp;quot;&amp;quot;Convert each words capital in string.&amp;quot;&amp;quot;&amp;quot; words = s.split(&amp;quot; &amp;quot;) capitaled_words = map(lambda x: x.capitalize(), words) return &#39; &#39;.join(capitaled_words) def main(): &amp;quot;&amp;quot;&amp;quot;Main.&amp;quot;&amp;quot;&amp;quot; parser = ArgumentParser() parser.add_argument(&#39;strings&#39;, metavar=&amp;quot;S&amp;quot;, type=str, nargs=&#39;+&#39;) args = parser.parse_args() for arg in args.</description>
    </item>
    
    <item>
      <title>Python classmethod/staticemthod</title>
      <link>https://elleryq.github.io/code-experiments/posts/2016-07-27-python-classmethod-staticemthod/</link>
      <pubDate>Wed, 27 Jul 2016 10:41:00 +0800</pubDate>
      
      <guid>https://elleryq.github.io/code-experiments/posts/2016-07-27-python-classmethod-staticemthod/</guid>
      <description>知道但是不太熟，特別來試試看。 classmethod 跟 staticmethod 很相似，classmethod 有帶一個 cls ，就是 class 本身，staticmethod 比較像是 c++/java 裡的 static。
from __future__ import print_function class C(object): def __init__(self, name): self.name = name @classmethod def build(cls, arg1, arg2): print(cls) print(arg1) print(arg2) return cls(&amp;quot;arg1={0} arg2={1}&amp;quot;.format(arg1, arg2)) @staticmethod def create(): return C(&amp;quot;Static&amp;quot;) c1 = C.build(3, 4) print(c1.name) c2 = C(&amp;quot;John&amp;quot;) print(c2.name) c3 = c2.build(1, 2) # 也可以用 C.build(1, 2) print(c3.name) c4 = C.create() print(c4.name)  </description>
    </item>
    
    <item>
      <title>Python hasattr</title>
      <link>https://elleryq.github.io/code-experiments/posts/2016-07-20-python-hasattr/</link>
      <pubDate>Wed, 20 Jul 2016 02:36:00 +0800</pubDate>
      
      <guid>https://elleryq.github.io/code-experiments/posts/2016-07-20-python-hasattr/</guid>
      <description>今天看到這篇文章：一个危险的Python函数，不推荐使用| 编程派 | Coding Python
裏面說，在 Python 2 裡不要用 hasattr 來判斷是否有屬性存在，好奇做了實驗。
我使用的 Python2 是 2.7.6，Python 3 是 3.4.3
# test_hasattr.py # python2 有繼承 object 跟沒繼承 object 有差別，所以特別試試看。 # 沒繼承 object class B(): def __init__(self): self.name = &amp;quot;B&amp;quot; @property def y(self): # print(&amp;quot;y&amp;quot;) return &amp;quot;y&amp;quot; # 有繼承 object class C(object): def __init__(self): self.name = &amp;quot;B&amp;quot; @property def y(self): # print(&amp;quot;y&amp;quot;) return &amp;quot;y&amp;quot; print(&amp;quot;hasattr(B(), &#39;y&#39;)={}&amp;quot;.format(hasattr(B(), &amp;quot;y&amp;quot;))) print(&amp;quot;hasattr(B(), &#39;name&#39;)={}&amp;quot;.format(hasattr(B(), &amp;quot;name&amp;quot;))) print(&amp;quot;hasattr(C(), &#39;y&#39;)={}&amp;quot;.format(hasattr(C(), &amp;quot;y&amp;quot;))) print(&amp;quot;hasattr(C(), &#39;name&#39;)={}&amp;quot;.</description>
    </item>
    
    <item>
      <title>Extract partial keys/attributes from dict/object</title>
      <link>https://elleryq.github.io/code-experiments/posts/2016-07-15-extract-partial-keys-attributes-from-dict-object/</link>
      <pubDate>Fri, 15 Jul 2016 09:25:00 +0800</pubDate>
      
      <guid>https://elleryq.github.io/code-experiments/posts/2016-07-15-extract-partial-keys-attributes-from-dict-object/</guid>
      <description>利用 dictionary comprehension 很輕易的就可以辦到這件事情。 參考自：http://stackoverflow.com/questions/5352546/best-way-to-extract-subset-of-key-value-pairs-from-python-dictionary-object
from datetime import datetime def getattrs(instance, attrs=[]): if isinstance(instance, dict): return { attr: instance[attr] for attr in attrs if attr in instance} elif isinstance(instance, object): return { attr: getattr(instance, attr) for attr in attrs } raise Exception(&amp;quot;Not object or dict&amp;quot;) class Book(object): def __init__(self, title, author, created=datetime.now()): self.title = title self.author = author self.created = created def __str__(self): return &amp;quot;{title} - {author}&amp;quot;.format(title=self.title, author=self.author) def __repr__(self): return self.</description>
    </item>
    
    <item>
      <title>Python try-except-else-finally</title>
      <link>https://elleryq.github.io/code-experiments/posts/2016-07-05-python-try-except-else-finally/</link>
      <pubDate>Tue, 05 Jul 2016 09:24:00 +0800</pubDate>
      
      <guid>https://elleryq.github.io/code-experiments/posts/2016-07-05-python-try-except-else-finally/</guid>
      <description>Python 的 try-except-finally 裡有 else 子句，這相當有意思。
finally 區塊的程式，不管 try-except 裡是否有 raise exception，都會被執行。而 else 則是只有在 try-except 裡沒有 raise exception 時才會被執行。
def foo(i): print(&amp;quot;\ni={}&amp;quot;.format(i)) try: if i == 0: raise Exception(&amp;quot;i == 0&amp;quot;) print(&amp;quot;Hello&amp;quot;) except Exception, ex: print(ex) else: print(&amp;quot;else&amp;quot;) finally: print(&amp;quot;finally&amp;quot;) foo(0) foo(1)  執行結果
i=0 i == 0 finally i=1 Hello else finally  </description>
    </item>
    
    <item>
      <title>Python Class variable</title>
      <link>https://elleryq.github.io/code-experiments/posts/2014-11-19-python-class-variable/</link>
      <pubDate>Wed, 19 Nov 2014 10:19:00 +0800</pubDate>
      
      <guid>https://elleryq.github.io/code-experiments/posts/2014-11-19-python-class-variable/</guid>
      <description>標題下的不好，因為不知道該怎麼說。類別裡宣告變數以後，之後方法裡，會怎麼去認定，為了搞清楚這點，就寫了小程式。
class Animal(object): NAME = &amp;quot;Animal&amp;quot; def __init__(self): print(Animal.NAME) def bark(self): print(&amp;quot;Bark(1): &amp;quot; + Animal.NAME) print(&amp;quot;Bark(2): &amp;quot; + self.NAME) animal = Animal() animal.bark() animal2 = Animal() animal2.NAME = &amp;quot;Planet&amp;quot; animal2.bark()  結果：
Animal Bark(1): Animal Bark(2): Animal Animal Bark(1): Animal Bark(2): Planet  依據結果的解讀是這樣，當用 Animal 宣告時，每個 instance 都會有一個 NAME，所以在變更 animal2.NAME 以後，bark 裡的 self.NAME 實際上就是變動後的內容 &amp;ldquo;Planet&amp;rdquo;；但如果用 Animal.NAME 就還是原來的 &amp;ldquo;Animal&amp;rdquo;。</description>
    </item>
    
    <item>
      <title>Python decorator</title>
      <link>https://elleryq.github.io/code-experiments/posts/2014-07-01-python-decorator/</link>
      <pubDate>Tue, 01 Jul 2014 01:38:00 +0800</pubDate>
      
      <guid>https://elleryq.github.io/code-experiments/posts/2014-07-01-python-decorator/</guid>
      <description>真的還是要自己試著憑空弄過一次才會比較清楚。
一般沒帶參數的 decorator，就是兩層。第一層負責接原來的函式，第二層的函式就是要傳回去的。有帶參數的 decorator，就是三層，第一層負責接參數，第二層負責接函式，第三層的函式是要傳回去的。
那如果有上多個 decorator 時，最裡層的會先被執行，接著才是外層的。
也可以用類別來寫，用類別寫就是要利用 __call__，之後再來試試看。
# -*- coding: utf-8 -*- from __future__ import print_function, unicode_literals def wrapper(f): def inside_func(*args, **kwargs): print(&amp;quot;&amp;gt; wrapper&amp;quot;) f(*args, **kwargs) print(&amp;quot;&amp;lt; wrapper&amp;quot;) return inside_func def before(s): def new_func(f): def inside_func(*args, **kwargs): print(s) f(*args, **kwargs) return inside_func return new_func def after(s): def new_func(f): def inside_func(*args, **kwargs): f(*args, **kwargs) print(s) return inside_func return new_func def repeat(n): def new_func(f): def inside_func(s): for i in range(n): f(s) return inside_func return new_func @wrapper def foo(s): print(s) @repeat(5) def foo1(s): print(s) @after(&amp;quot;&amp;lt;&amp;lt;&amp;lt;&amp;quot;) # then here @before(&amp;quot;&amp;gt;&amp;gt;&amp;gt;&amp;quot;) # run first def foo2(s): print(s) foo(&amp;quot;Hello&amp;quot;) # 前後會加上 &#39;&amp;gt; wrapper&#39; 與 &#39;&amp;lt; wrapper&#39; foo1(&amp;quot;World&amp;quot;) # 這會印五次 World，因為 repeat(5) foo2(&amp;quot;Hello world&amp;quot;) # 先印出 &#39;&amp;gt;&amp;gt;&amp;gt;&#39; ，執行原函式，再印出 &#39;&amp;lt;&amp;lt;&amp;lt;&#39;  輸出結果</description>
    </item>
    
    <item>
      <title>Python nested if</title>
      <link>https://elleryq.github.io/code-experiments/posts/2014-06-18-python-nested-if/</link>
      <pubDate>Wed, 18 Jun 2014 02:21:00 +0800</pubDate>
      
      <guid>https://elleryq.github.io/code-experiments/posts/2014-06-18-python-nested-if/</guid>
      <description>之前在 checkio 網站有看過人家這樣寫：
def checkio(x, y): result = (x&amp;gt;10, y&amp;lt;10) conditions = { (True, True): 1, (True, False): 2, (False, True): 3, (False, False): 4 } return conditions(x, y)  真的有醍醐灌頂之感，原來 tuple 也可以拿來當作 dict 的 key。
不過今天不是說這個，昨天天寫出這種 code，覺得超級醜：
s = &amp;quot;Hello&amp;quot; pos = s.find(&#39;a&#39;) if pos == -1: pos = s.find(&#39;b&#39;) if pos == -1: pos = s.find(&#39;c&#39;) if pos == -1: return  今天就在想要怎麼寫會比較好，原本想說：
pos = s.find(&#39;a&#39;) or s.find(&#39;b&#39;) or s.</description>
    </item>
    
  </channel>
</rss>